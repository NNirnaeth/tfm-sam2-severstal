#!/usr/bin/env python3
"""
Script para probar el formato de bitmap de Severstal
Verifica la decodificaci√≥n correcta de las anotaciones PNG
"""

import os
import sys
import json
import numpy as np
import cv2
from PIL import Image
import base64
import io
from pathlib import Path

# Add paths
sys.path.append('..')
sys.path.append('../../libs/sam2base')

def test_severstal_bitmap_format():
    """Probar el formato de bitmap de Severstal"""
    print("üß™ Probando formato de bitmap de Severstal")
    print("=" * 50)
    
    # Ruta del dataset
    ann_dir = Path("../../datasets/severstal/train_split/ann")
    img_dir = Path("../../datasets/severstal/train_split/img")
    
    if not ann_dir.exists():
        print(f"‚ùå Directorio de anotaciones no encontrado: {ann_dir}")
        return False
    
    # Tomar una anotaci√≥n de ejemplo
    ann_files = list(ann_dir.glob("*.json"))[:3]  # Primeras 3 anotaciones
    
    for i, ann_file in enumerate(ann_files):
        print(f"\nüìÑ Probando anotaci√≥n {i+1}: {ann_file.name}")
        
        try:
            with open(ann_file, 'r') as f:
                ann_data = json.load(f)
            
            # Verificar estructura
            if 'objects' not in ann_data:
                print("   ‚ùå No hay objetos en la anotaci√≥n")
                continue
            
            print(f"   üìä Objetos encontrados: {len(ann_data['objects'])}")
            
            # Probar cada objeto
            for j, obj in enumerate(ann_data['objects']):
                print(f"   üîç Objeto {j+1}:")
                
                if 'bitmap' not in obj:
                    print("     ‚ùå No tiene bitmap")
                    continue
                
                if 'data' not in obj['bitmap']:
                    print("     ‚ùå No tiene datos de bitmap")
                    continue
                
                # Verificar formato de datos
                bitmap_data = obj['bitmap']['data']
                print(f"     üìè Longitud de datos: {len(bitmap_data)}")
                
                # Intentar decodificar base64
                try:
                    png_data = base64.b64decode(bitmap_data)
                    print(f"     ‚úÖ Base64 decodificado: {len(png_data)} bytes")
                    
                    # Verificar si es PNG v√°lido
                    if png_data.startswith(b'\x89PNG'):
                        print("     ‚úÖ Formato PNG v√°lido")
                    else:
                        print("     ‚ùå No es formato PNG v√°lido")
                        continue
                    
                    # Cargar imagen PNG
                    png_image = Image.open(io.BytesIO(png_data))
                    print(f"     üìê Dimensiones PNG: {png_image.size}")
                    
                    # Convertir a numpy
                    mask = np.array(png_image)
                    print(f"     üé® Forma numpy: {mask.shape}")
                    print(f"     üé® Tipo de datos: {mask.dtype}")
                    print(f"     üé® Valores √∫nicos: {np.unique(mask)}")
                    
                    # Verificar origen si existe
                    if 'origin' in obj['bitmap']:
                        origin = obj['bitmap']['origin']
                        print(f"     üìç Origen: {origin}")
                    else:
                        print("     ‚ö†Ô∏è No hay informaci√≥n de origen")
                    
                    # Verificar clase
                    if 'classTitle' in obj:
                        print(f"     üè∑Ô∏è Clase: {obj['classTitle']}")
                    
                except Exception as e:
                    print(f"     ‚ùå Error decodificando: {e}")
                    continue
                
                print("     ‚úÖ Objeto procesado correctamente")
                break  # Solo probar el primer objeto de cada anotaci√≥n
            
        except Exception as e:
            print(f"   ‚ùå Error procesando anotaci√≥n: {e}")
            continue
    
    return True

def test_binary_mask_creation():
    """Probar la creaci√≥n de m√°scaras binarias"""
    print("\nüß™ Probando creaci√≥n de m√°scaras binarias")
    print("=" * 50)
    
    # Tomar una anotaci√≥n de ejemplo
    ann_file = Path("../../datasets/severstal/train_split/ann/7435bcc25.jpg.json")
    
    if not ann_file.exists():
        print(f"‚ùå Archivo de ejemplo no encontrado: {ann_file}")
        return False
    
    try:
        with open(ann_file, 'r') as f:
            ann_data = json.load(f)
        
        print(f"üìÑ Anotaci√≥n cargada: {ann_file.name}")
        print(f"üìä Objetos: {len(ann_data['objects'])}")
        
        # Obtener dimensiones de la imagen
        if 'size' in ann_data:
            height = ann_data['size']['height']
            width = ann_data['size']['width']
            print(f"üìê Dimensiones imagen: {width}x{height}")
        else:
            print("‚ùå No hay informaci√≥n de dimensiones")
            return False
        
        # Crear m√°scara binaria
        binary_mask = create_binary_mask_from_objects(ann_data, (height, width))
        
        if binary_mask is not None:
            print(f"‚úÖ M√°scara binaria creada: {binary_mask.shape}")
            print(f"üìä P√≠xeles con defecto: {binary_mask.sum()}")
            print(f"üìä Porcentaje de defecto: {binary_mask.sum() / binary_mask.size * 100:.2f}%")
            
            # Guardar m√°scara para inspecci√≥n visual
            output_dir = Path("../../datasets/severstal_lora/test_output")
            output_dir.mkdir(parents=True, exist_ok=True)
            
            mask_path = output_dir / "test_binary_mask.png"
            cv2.imwrite(str(mask_path), binary_mask * 255)
            print(f"üíæ M√°scara guardada en: {mask_path}")
            
            return True
        else:
            print("‚ùå No se pudo crear la m√°scara binaria")
            return False
            
    except Exception as e:
        print(f"‚ùå Error en prueba de m√°scara binaria: {e}")
        return False

def create_binary_mask_from_objects(ann_data, image_shape):
    """Crear m√°scara binaria combinando todos los objetos de defecto"""
    if 'objects' not in ann_data or not ann_data['objects']:
        return None
    
    height, width = image_shape
    binary_mask = np.zeros((height, width), dtype=np.uint8)
    
    for obj in ann_data['objects']:
        if 'bitmap' not in obj or 'data' not in obj['bitmap']:
            continue
        
        try:
            # Decodificar bitmap PNG (formato Severstal)
            png_data = base64.b64decode(obj['bitmap']['data'])
            
            # Cargar PNG desde bytes
            png_image = Image.open(io.BytesIO(png_data))
            obj_mask = np.array(png_image)
            
            # Convertir a binario
            obj_mask = obj_mask > 0
            
            # Obtener origen del bitmap (posici√≥n en la imagen)
            origin = obj['bitmap'].get('origin', [0, 0])
            origin_x, origin_y = origin[0], origin[1]
            
            # Calcular dimensiones del bitmap
            mask_height, mask_width = obj_mask.shape
            
            # Colocar el bitmap en la posici√≥n correcta
            end_y = min(origin_y + mask_height, height)
            end_x = min(origin_x + mask_width, width)
            
            # Asegurar que no exceda los l√≠mites
            start_y = max(0, origin_y)
            start_x = max(0, origin_x)
            
            # Ajustar √≠ndices del bitmap si es necesario
            bitmap_start_y = max(0, -origin_y)
            bitmap_start_x = max(0, -origin_x)
            
            # Colocar el bitmap en la m√°scara principal
            binary_mask[start_y:end_y, start_x:end_x] = np.logical_or(
                binary_mask[start_y:end_y, start_x:end_x],
                obj_mask[bitmap_start_y:bitmap_start_y + (end_y - start_y), 
                        bitmap_start_x:bitmap_start_x + (end_x - start_x)]
            )
            
        except Exception as e:
            print(f"‚ö†Ô∏è Error procesando objeto: {e}")
            continue
    
    return binary_mask

def main():
    """Funci√≥n principal"""
    print("üöÄ INICIANDO PRUEBAS DE FORMATO BITMAP SEVERSTAL")
    print("=" * 60)
    
    # Prueba 1: Formato de bitmap
    success1 = test_severstal_bitmap_format()
    
    # Prueba 2: Creaci√≥n de m√°scaras binarias
    success2 = test_binary_mask_creation()
    
    # Resumen
    print("\n" + "=" * 60)
    print("üìä RESUMEN DE PRUEBAS")
    print("=" * 60)
    
    if success1 and success2:
        print("üéâ ¬°TODAS LAS PRUEBAS PASARON!")
        print("‚úÖ El formato de bitmap de Severstal est√° correctamente implementado")
        print("‚úÖ La conversi√≥n a m√°scaras binarias funciona correctamente")
        print("\nüìã Pr√≥ximos pasos:")
        print("1. Ejecutar: python phase0_preparation.py")
        print("2. Verificar que las m√°scaras binarias se generan correctamente")
    else:
        print("‚ö†Ô∏è Algunas pruebas fallaron")
        print("‚ùå Revisar errores antes de continuar")
    
    return success1 and success2

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)







































